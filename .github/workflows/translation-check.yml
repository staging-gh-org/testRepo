name: Translation Check

on:
  push:
    branches:
      - master

jobs:
  check_translations:
    runs-on: ubuntu-latest
    environment: Hatcher+ FAAST
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.HATCHER_PLUS_APP_ID }}
          private-key: ${{ secrets.HATCHER_PLUS_APP_SECRET }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Check if only translations.md was changed
        id: check_changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          if [ "$CHANGED_FILES" = "translations.md" ]; then
            echo "Only translations.md was changed. Exiting workflow."
            echo "only_translations_md=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "only_translations_md=false" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        if: steps.check_changes.outputs.only_translations_md == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        if: steps.check_changes.outputs.only_translations_md == 'false'
        run: npm install axios glob

      - name: Check for translations
        if: steps.check_changes.outputs.only_translations_md == 'false'
        id: check_translations
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          SCRIPT_PATH=".github/workflows/translation-check.js"
          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "Error: $SCRIPT_PATH not found"
            exit 1
          fi
          RESULT=$(node --experimental-modules --es-module-specifier-resolution=node "$SCRIPT_PATH" "${{ secrets.HATCHER_BEARER_TOKEN }}")
          echo "result=$RESULT" >> $GITHUB_OUTPUT

      - name: Update translations file
        if: steps.check_changes.outputs.only_translations_md == 'false' && fromJson(steps.check_translations.outputs.result).hasChanges
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          RESULT='${{ steps.check_translations.outputs.result }}'
          ALL_TRANSLATIONS=$(echo "$RESULT" | jq -r '.allTranslations')
          NEW_TRANSLATIONS=$(echo "$RESULT" | jq -r '.newTranslations')
          MD_FILE="translations.md"

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="update-translations-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME

          echo "| Translation Key | Status | Location | Committer |" > "$MD_FILE"
          echo "|-----------------|--------|----------|-----------|" >> "$MD_FILE"

          echo "$ALL_TRANSLATIONS" | jq -c '.[]' | while read -r translation; do
            key=$(echo $translation | jq -r '.key')
            status=$(echo $translation | jq -r '.status')
            file=$(echo $translation | jq -r '.file')
            line=$(echo $translation | jq -r '.line')
            committer=$(echo $translation | jq -r '.committer')
            if [ "$status" == "Missing" ]; then
              status_emoji="ðŸ”´"
            else
              status_emoji="ðŸŸ¢"
            fi
            echo "| \`$key\` | $status_emoji | [$file:$line](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/$file#L$line) | $committer |" >> "$MD_FILE"
          done

          git add "$MD_FILE"

          NEW_TRANSLATIONS_COUNT=$(echo "$NEW_TRANSLATIONS" | jq '. | length')
          if [ "$NEW_TRANSLATIONS_COUNT" -gt 0 ]; then
            echo "$ALL_TRANSLATIONS" | jq -c '.[] | select(.isNew)' | while read -r new_translation; do
              key=$(echo $new_translation | jq -r '.key')
              committer=$(echo $new_translation | jq -r '.committer')
              git commit -m "Translation \`$key\` was added by \`$committer\`"
            done
          else
            git commit -m "Update translations status"
          fi

          git push origin $BRANCH_NAME

          PR_BODY="Automatically generated PR to update the translations status"
          if [ "$NEW_TRANSLATIONS_COUNT" -gt 0 ]; then
            PR_BODY="$PR_BODY\n\nNew translations added in this PR:"
            echo "$ALL_TRANSLATIONS" | jq -c '.[] | select(.isNew)' | while read -r new_translation; do
              key=$(echo $new_translation | jq -r '.key')
              committer=$(echo $new_translation | jq -r '.committer')
              PR_BODY="$PR_BODY\n- \`$key\` added by \`$committer\`"
            done
          fi

          PR_URL=$(gh pr create --title "Update translations status" \
                                --body "$PR_BODY" \
                                --base master \
                                --head $BRANCH_NAME)

          if gh pr checks $PR_URL; then
            echo "Checks found, waiting for completion..."
            gh pr checks $PR_URL --watch
            if gh pr checks $PR_URL; then
              echo "Checks passed, merging PR"
              gh pr merge $PR_URL --merge --admin
            else
              echo "Checks failed, PR was not merged"
              exit 1
            fi
          else
            echo "No checks found, merging PR immediately"
            gh pr merge $PR_URL --merge --admin
          fi

      - name: Clean up
        if: always() && steps.check_changes.outputs.only_translations_md == 'false'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          BRANCH_NAME="update-translations-$(date +%Y%m%d%H%M%S)"
          
          PR_URL=$(gh pr list --head $BRANCH_NAME --json url --jq '.[0].url')
          if [ ! -z "$PR_URL" ]; then
            PR_STATE=$(gh pr view $PR_URL --json state --jq .state 2>/dev/null)
            
            if [ "$PR_STATE" = "MERGED" ]; then
              echo "PR was merged, deleting branch $BRANCH_NAME"
            elif [ "$PR_STATE" = "OPEN" ]; then
              echo "PR is still open, closing PR"
              gh pr close $PR_URL
            else
              echo "PR is in state $PR_STATE or doesn't exist"
            fi
          else
            echo "No PR was created for this branch"
          fi
          
          # Always try to delete the branch, ignoring errors
          git push origin --delete $BRANCH_NAME || true